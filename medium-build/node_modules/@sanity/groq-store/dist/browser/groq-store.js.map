{"version":3,"file":"groq-store.js","sources":["../../src/listen.ts","../../src/drafts.ts","../../src/patch.ts","../../src/syncingDataset.ts","../../src/browser/getDocuments.ts","../../src/browser/index.ts","../../src/browser/support.ts","../../src/groqStore.ts"],"sourcesContent":["import {Subscription, MutationEvent, Config, ApiError, EnvImplementations} from './types'\n\ntype EventSourceInstance = InstanceType<EnvImplementations['EventSource']>\n\nconst isNativeBrowserEventSource = (\n  eventSource: EventSourceInstance\n): eventSource is InstanceType<typeof globalThis.EventSource> =>\n  typeof window !== 'undefined' &&\n  eventSource.addEventListener === window.EventSource.prototype.addEventListener\n\nconst addEventSourceListener = (\n  eventSource: EventSourceInstance,\n  type: string,\n  listener: EventListener\n): void => {\n  if (isNativeBrowserEventSource(eventSource)) {\n    eventSource.addEventListener(type, listener, false)\n  }\n\n  // Polyfilled event source does not accept option parameter\n  eventSource.addEventListener(type, listener)\n}\n\nexport function listen(\n  EventSourceImpl: EnvImplementations['EventSource'],\n  config: Config,\n  handlers: {\n    open: () => void\n    error: (err: Error) => void\n    next: (event: MutationEvent) => void\n  }\n): Subscription {\n  const {projectId, dataset, token} = config\n  const headers = token ? {Authorization: `Bearer ${token}`} : undefined\n  const url = `https://${projectId}.api.sanity.io/v1/data/listen/${dataset}?query=*&effectFormat=mendoza`\n  const es = new EventSourceImpl(url, {withCredentials: true, headers})\n\n  addEventSourceListener(es, 'welcome', handlers.open)\n\n  addEventSourceListener(es, 'mutation', getMutationParser(handlers.next))\n\n  addEventSourceListener(es, 'channelError', (msg: any) => {\n    es.close()\n\n    let data\n    try {\n      data = JSON.parse(msg.data) as ApiError\n    } catch (err) {\n      handlers.error(new Error('Unknown error parsing listener message'))\n      return\n    }\n\n    handlers.error(\n      new Error(data.message || data.error || `Listener returned HTTP ${data.statusCode}`)\n    )\n  })\n\n  addEventSourceListener(es, 'error', (err: Event) => {\n    const origin = typeof window !== 'undefined' && window.location.origin\n    const hintSuffix = origin ? `, and that the CORS-origin (${origin}) is allowed` : ''\n    const errorMessage = isErrorLike(err) ? ` (${err.message})` : ''\n    handlers.error(\n      new Error(\n        `Error establishing listener - check that the project ID and dataset are correct${hintSuffix}${errorMessage}`\n      )\n    )\n  })\n\n  return {\n    unsubscribe: (): Promise<void> => Promise.resolve(es.close()),\n  }\n}\n\nfunction getMutationParser(cb: (event: MutationEvent) => void): (msg: any) => void {\n  return (msg: any) => {\n    let data\n    try {\n      data = JSON.parse(msg.data)\n    } catch (err) {\n      // intentional noop\n      return\n    }\n\n    cb(data)\n  }\n}\n\nfunction isErrorLike(err: unknown): err is {message: string} {\n  return typeof err === 'object' && err !== null && 'message' in err\n}\n","import {SanityDocument} from '@sanity/types'\n\nexport function isDraft(doc: SanityDocument): boolean {\n  return doc._id.startsWith('drafts.')\n}\n\nexport function getPublishedId(document: SanityDocument): string {\n  return isDraft(document) ? document._id.slice(7) : document._id\n}\n","import {SanityDocument} from '@sanity/types'\nimport {applyPatch} from 'mendoza'\n\nexport function applyPatchWithoutRev(\n  doc: SanityDocument | null,\n  patch: unknown[]\n): SanityDocument | null {\n  const patchDoc = {...doc} as Omit<SanityDocument, '_rev'>\n  delete patchDoc._rev\n  return applyPatch(patchDoc, patch)\n}\n","import {SanityDocument} from '@sanity/types'\nimport {listen} from './listen'\nimport {getPublishedId} from './drafts'\nimport {applyPatchWithoutRev} from './patch'\nimport {Config, EnvImplementations, MutationEvent, Subscription} from './types'\n\nconst DEBOUNCE_MS = 25\n\nfunction noop() {\n  return Promise.resolve()\n}\n\nexport function getSyncingDataset(\n  config: Config,\n  onNotifyUpdate: (docs: SanityDocument[]) => void,\n  {getDocuments, EventSource}: EnvImplementations\n): Subscription & {loaded: Promise<void>} {\n  const {projectId, dataset, listen: useListener, overlayDrafts, documentLimit, token} = config\n\n  if (!useListener) {\n    const loaded = getDocuments({projectId, dataset, documentLimit, token})\n      .then(onUpdate)\n      .then(noop)\n    return {unsubscribe: noop, loaded}\n  }\n\n  const indexedDocuments = new Map<string, SanityDocument>()\n\n  // undefined until the listener has been set up and the initial export is done\n  let documents: SanityDocument[] | undefined\n\n  // holds any mutations that happen while fetching documents so they can be applied after updates\n  const buffer: MutationEvent[] = []\n\n  // Return a promise we can resolve once we've established a listener and reconciled any mutations\n  let onDoneLoading: () => void\n  let onLoadError: (error: Error) => void\n  const loaded = new Promise<void>((resolve, reject) => {\n    onDoneLoading = resolve\n    onLoadError = reject\n  })\n\n  // We don't want to flush updates while we're in the same transaction, so a normal\n  // throttle/debounce wouldn't do it. We need to wait and see if the next mutation is\n  // within the same transaction as the previous, and if not we can flush. Of course,\n  // we can't wait forever, so an upper threshold of X ms should be counted as \"ok to flush\"\n  let stagedDocs: SanityDocument[] | undefined\n  let previousTrx: string | undefined\n  let flushTimeout: number | undefined\n\n  const listener = listen(EventSource, config, {\n    next: onMutationReceived,\n    open: onOpen,\n    error: (error: Error) => onLoadError(error),\n  })\n\n  return {unsubscribe: listener.unsubscribe, loaded}\n\n  async function onOpen() {\n    const initial = await getDocuments({projectId, dataset, documentLimit, token})\n    documents = applyBufferedMutations(initial, buffer)\n    documents.forEach((doc) => indexedDocuments.set(doc._id, doc))\n    onUpdate(documents)\n    onDoneLoading()\n  }\n\n  function onMutationReceived(msg: MutationEvent) {\n    if (documents) {\n      applyMutation(msg)\n      scheduleUpdate(documents, msg)\n    } else {\n      buffer.push(msg)\n    }\n  }\n\n  function scheduleUpdate(docs: SanityDocument[], msg: MutationEvent) {\n    clearTimeout(flushTimeout)\n\n    if (previousTrx !== msg.transactionId && stagedDocs) {\n      // This is a new transaction, meaning we can immediately flush any pending\n      // doc updates if there are any\n      onUpdate(stagedDocs)\n      previousTrx = undefined\n    } else {\n      previousTrx = msg.transactionId\n      stagedDocs = docs.slice()\n    }\n\n    flushTimeout = setTimeout(onUpdate, DEBOUNCE_MS, docs.slice())\n  }\n\n  function onUpdate(docs: SanityDocument[]) {\n    stagedDocs = undefined\n    flushTimeout = undefined\n    previousTrx = undefined\n    onNotifyUpdate(overlayDrafts ? overlay(docs) : docs)\n  }\n\n  function applyMutation(msg: MutationEvent) {\n    if (!msg.effects || msg.documentId.startsWith('_.')) {\n      return\n    }\n\n    const document = indexedDocuments.get(msg.documentId) || null\n    replaceDocument(msg.documentId, applyPatchWithoutRev(document, msg.effects.apply))\n  }\n\n  function replaceDocument(id: string, document: SanityDocument | null) {\n    const current = indexedDocuments.get(id)\n    const docs = documents || []\n    const position = current ? docs.indexOf(current) : -1\n\n    if (position === -1 && document) {\n      // Didn't exist previously, but was now created. Add it.\n      docs.push(document)\n      indexedDocuments.set(id, document)\n    } else if (document) {\n      // Existed previously and still does. Replace it.\n      docs.splice(position, 1, document)\n      indexedDocuments.set(id, document)\n    } else {\n      // Existed previously, but is now deleted. Remove it.\n      docs.splice(position, 1)\n      indexedDocuments.delete(id)\n    }\n  }\n}\n\nfunction applyBufferedMutations(\n  documents: SanityDocument[],\n  mutations: MutationEvent[]\n): SanityDocument[] {\n  // Group by document ID\n  const groups = new Map<string, MutationEvent[]>()\n  mutations.forEach((mutation) => {\n    const group = groups.get(mutation.documentId) || []\n    group.push(mutation)\n    groups.set(mutation.documentId, group)\n  })\n\n  // Discard all mutations that happened before our current document\n  groups.forEach((group, id) => {\n    const document = documents.find((doc) => doc._id === id)\n    if (!document) {\n      // @todo handle\n      // eslint-disable-next-line no-console\n      console.warn('Received mutation for missing document %s', id)\n      return\n    }\n\n    // Mutations are sorted by timestamp, apply any that arrived after\n    // we fetched the initial documents\n    let hasFoundRevision = false\n    let current: SanityDocument | null = document\n    group.forEach((mutation) => {\n      hasFoundRevision = hasFoundRevision || mutation.previousRev === document._rev\n      if (!hasFoundRevision) {\n        return\n      }\n\n      if (mutation.effects) {\n        current = applyPatchWithoutRev(current, mutation.effects.apply)\n      }\n    })\n\n    // Replace the indexed documents\n    documents.splice(documents.indexOf(document), 1, current)\n  })\n\n  return documents\n}\n\nfunction overlay(documents: SanityDocument[]): SanityDocument[] {\n  const overlayed = new Map<string, SanityDocument>()\n\n  documents.forEach((doc) => {\n    const existing = overlayed.get(getPublishedId(doc))\n    if (doc._id.startsWith('drafts.')) {\n      // Drafts always overlay\n      overlayed.set(getPublishedId(doc), pretendThatItsPublished(doc))\n    } else if (!existing) {\n      // Published documents only override if draft doesn't exist\n      overlayed.set(doc._id, doc)\n    }\n  })\n\n  return Array.from(overlayed.values())\n}\n\n// Strictly speaking it would be better to allow groq-js to resolve `draft.<id>`,\n// but for now this will have to do\nfunction pretendThatItsPublished(doc: SanityDocument): SanityDocument {\n  return {...doc, _id: getPublishedId(doc)}\n}\n","import {SanityDocument} from '@sanity/types'\nimport {EnvImplementations} from '../types'\n\ntype StreamError = {error: {description?: string; type: string}}\ntype StreamResult = SanityDocument | StreamError\n\nexport const getDocuments: EnvImplementations['getDocuments'] = async function getDocuments({\n  projectId,\n  dataset,\n  token,\n  documentLimit,\n}: {\n  projectId: string\n  dataset: string\n  token?: string\n  documentLimit?: number\n}): Promise<SanityDocument[]> {\n  const url = `https://${projectId}.api.sanity.io/v1/data/export/${dataset}`\n  const headers = token ? {Authorization: `Bearer ${token}`} : undefined\n  const response = await fetch(url, {credentials: 'include', headers})\n\n  if (response.status !== 200) {\n    throw new Error(`Error streaming dataset: ${getError(await response.json())}`)\n  }\n\n  const stream = getDocumentStream(response.body)\n  const reader = stream.getReader()\n\n  const documents: SanityDocument[] = []\n  let result\n  let document\n  do {\n    result = await reader.read()\n    document = result.value\n\n    if (isStreamError(document)) {\n      throw new Error(`Error streaming dataset: ${document.error}`)\n    } else if (document && isRelevantDocument(document)) {\n      documents.push(document)\n    }\n\n    if (documentLimit && documents.length > documentLimit) {\n      reader.cancel('Reached document limit')\n      throw new Error(`Error streaming dataset: Reached limit of ${documentLimit} documents`)\n    }\n  } while (!result.done)\n\n  return documents\n}\n\nfunction getDocumentStream(body: Response['body']): ReadableStream<StreamResult> {\n  if (!body) {\n    throw new Error('Failed to read body from response')\n  }\n\n  let reader: ReadableStreamDefaultReader<Uint8Array> | undefined\n  let cancelled = false\n\n  function cancel() {\n    cancelled = true\n    if (reader) {\n      reader.cancel()\n    }\n  }\n\n  return new ReadableStream<SanityDocument>({\n    start(controller): void | PromiseLike<void> {\n      reader = body.getReader()\n      const decoder = new TextDecoder()\n      let buffer = ''\n\n      reader\n        .read()\n        .then(processResult)\n        .catch((err) => controller.error(err))\n\n      async function processResult(\n        result: ReadableStreamDefaultReadResult<Uint8Array>\n      ): Promise<void> {\n        if (result.done) {\n          if (cancelled) {\n            return\n          }\n\n          buffer = buffer.trim()\n          if (buffer.length === 0) {\n            controller.close()\n            return\n          }\n\n          controller.enqueue(JSON.parse(buffer))\n          controller.close()\n          return\n        }\n\n        buffer += decoder.decode(result.value, {stream: true})\n        const lines = buffer.split('\\n')\n\n        for (let i = 0; i < lines.length - 1; ++i) {\n          const line = lines[i].trim()\n          if (line.length === 0) {\n            continue\n          }\n\n          try {\n            controller.enqueue(JSON.parse(line))\n          } catch (err) {\n            controller.error(err)\n            cancel()\n            return\n          }\n        }\n\n        buffer = lines[lines.length - 1]\n\n        if (!reader) {\n          return\n        }\n\n        try {\n          processResult(await reader.read())\n        } catch (err) {\n          controller.error(err)\n        }\n      }\n    },\n\n    cancel,\n  })\n}\n\nfunction isStreamError(result: StreamResult | undefined): result is StreamError {\n  if (!result) {\n    return false\n  }\n\n  if (!('error' in result) || typeof result.error !== 'object' || result.error === null) {\n    return false\n  }\n\n  return (\n    'description' in result.error &&\n    typeof (result as StreamError).error.description === 'string' &&\n    !('_id' in result)\n  )\n}\n\nfunction getError(body: any): string {\n  if (typeof body === 'object' && 'error' in body && 'message' in body) {\n    return body.message || body.error\n  }\n\n  return '<unknown error>'\n}\n\nfunction isRelevantDocument(doc: SanityDocument): boolean {\n  return !doc._id.startsWith('_.')\n}\n","import {groqStore as groqStoreApi} from '../groqStore'\nimport {Config, GroqStore} from '../types'\nimport {getDocuments} from './getDocuments'\nimport {assertEnvSupport} from './support'\n\nexport function groqStore(config: Config): GroqStore {\n  assertEnvSupport()\n\n  const EventSource = config.EventSource ?? window.EventSource\n\n  if (config.token && EventSource === window.EventSource) {\n    throw new Error(\n      'When`token` option is used, `EventSource` option must also be provided. ' +\n        'EventSource cannot be `window.EventSource`, as it does not support passing a token.'\n    )\n  }\n\n  return groqStoreApi(config, {\n    EventSource,\n    getDocuments,\n  })\n}\n\nexport {default as groq} from 'groq'\nexport {Subscription, GroqStore} from '../types'\n","export function assertEnvSupport(): void {\n  const required = ['EventSource', 'ReadableStream', 'fetch']\n  const unsupported = required.filter((api) => !(api in window))\n\n  if (unsupported.length > 0) {\n    throw new Error(`Browser not supported. Missing browser APIs: ${unsupported.join(', ')}`)\n  }\n}\n","import groq from 'groq'\nimport deepEqual from 'fast-deep-equal'\nimport {throttle} from 'throttle-debounce'\nimport {SanityDocument} from '@sanity/types'\nimport {parse, evaluate} from 'groq-js'\nimport {Config, EnvImplementations, GroqSubscription, GroqStore, Subscription} from './types'\nimport {getSyncingDataset} from './syncingDataset'\n\nexport function groqStore(config: Config, envImplementations: EnvImplementations): GroqStore {\n  let documents: SanityDocument[] = []\n  const executeThrottled = throttle(config.subscriptionThrottleMs || 50, executeAllSubscriptions)\n  const activeSubscriptions: GroqSubscription[] = []\n\n  let dataset: Subscription & {loaded: Promise<void>}\n\n  async function loadDataset() {\n    if (!dataset) {\n      dataset = getSyncingDataset(\n        config,\n        (docs) => {\n          documents = docs\n          executeThrottled()\n        },\n        envImplementations\n      )\n    }\n\n    await dataset.loaded\n  }\n\n  async function query<R = any>(groqQuery: string, params?: Record<string, unknown>): Promise<R> {\n    await loadDataset()\n    const tree = parse(groqQuery, {params})\n    const result = await evaluate(tree as any, {dataset: documents, params})\n    return result.get()\n  }\n\n  async function getDocument(documentId: string): Promise<SanityDocument | null> {\n    await loadDataset()\n    return query(groq`*[_id == $id][0]`, {id: documentId})\n  }\n\n  async function getDocuments(documentIds: string[]): Promise<(SanityDocument | null)[]> {\n    await loadDataset()\n    const subQueries = documentIds.map((id) => `*[_id == \"${id}\"][0]`).join(',\\n')\n    return query(`[${subQueries}]`)\n  }\n\n  function subscribe<R = any>(\n    groqQuery: string,\n    params: Record<string, unknown>,\n    callback: (error: Error | undefined, result?: R) => void\n  ): Subscription {\n    if (!config.listen) {\n      throw new Error('Cannot use `subscribe()` without `listen: true`')\n    }\n\n    // @todo Execute the query against an empty dataset for validation purposes\n\n    // Store the subscription so we can re-run the query on new data\n    const subscription = {query: groqQuery, params, callback}\n    activeSubscriptions.push(subscription)\n\n    let unsubscribed = false\n    const unsubscribe = () => {\n      if (unsubscribed) {\n        return Promise.resolve()\n      }\n\n      unsubscribed = true\n      activeSubscriptions.splice(activeSubscriptions.indexOf(subscription), 1)\n      return Promise.resolve()\n    }\n\n    executeQuerySubscription(subscription)\n    return {unsubscribe}\n  }\n\n  function executeQuerySubscription(subscription: GroqSubscription) {\n    return query(subscription.query, subscription.params)\n      .then((res) => {\n        if ('previousResult' in subscription && deepEqual(subscription.previousResult, res)) {\n          return\n        }\n\n        subscription.previousResult = res\n        subscription.callback(undefined, res)\n      })\n      .catch((err) => {\n        subscription.callback(err)\n      })\n  }\n\n  function executeAllSubscriptions() {\n    activeSubscriptions.forEach(executeQuerySubscription)\n  }\n\n  function close() {\n    executeThrottled.cancel()\n    return dataset ? dataset.unsubscribe() : Promise.resolve()\n  }\n\n  return {query, getDocument, getDocuments, subscribe, close}\n}\n"],"names":["eventSource","type","listener","window","addEventListener","EventSource","prototype","isNativeBrowserEventSource","listen","EventSourceImpl","config","handlers","cb","token","projectId","dataset","withCredentials","headers","Authorization","undefined","addEventSourceListener","es","open","next","msg","data","JSON","parse","err","close","error","Error","message","statusCode","origin","location","hintSuffix","errorMessage","isErrorLike","unsubscribe","Promise","resolve","getPublishedId","document","_id","startsWith","slice","applyPatchWithoutRev","doc","patch","patchDoc","_rev","applyPatch","noop","_settle","pact","state","value","s","_Pact","o","bind","v","then","observer","onFulfilled","onRejected","result","this","callback","e","_this","thenable","getDocuments","_ref","documentLimit","fetch","credentials","response","_temp3","_result","stream","body","reader","cancel","cancelled","ReadableStream","start","controller","getReader","TextDecoder","buffer","read","processResult","done","trim","length","enqueue","decoder","decode","split","i","lines","line","_temp5","_catch","getDocumentStream","documents","_temp","_do","_reader$read","description","isStreamError","push","_result2","status","json","_response$json","_temp2","reject","_config$EventSource","unsupported","filter","api","join","assertEnvSupport","envImplementations","query","groqQuery","params","loadDataset","evaluate","tree","get","onNotifyUpdate","overlayDrafts","loaded","onUpdate","onDoneLoading","onLoadError","flushTimeout","indexedDocuments","Map","effects","documentId","id","docs","position","current","indexOf","set","splice","replaceDocument","apply","applyMutation","clearTimeout","previousTrx","transactionId","stagedDocs","setTimeout","scheduleUpdate","initial","mutations","groups","forEach","mutation","group","find","hasFoundRevision","previousRev","console","warn","applyBufferedMutations","overlayed","existing","pretendThatItsPublished","from","values","overlay","getSyncingDataset","executeThrottled","throttle","subscriptionThrottleMs","activeSubscriptions","executeQuerySubscription","subscription","res","deepEqual","previousResult","getDocument","groq","_templateObject","documentIds","map","subQueries","subscribe","unsubscribed","groqStoreApi"],"mappings":"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"}